#!/usr/bin/python3
import os, pwd, sys, stat, platform
import argparse
import configparser, io
from time import sleep
from shutil import copyfile
from subprocess import call, check_output

#
# COMMAND: Start a container.
#
def START(arguments, container_name):
  c = get_container_vars(container_name)
  initialize(c)

  # Assure all bind mounts are mounted.
  mount(batch=c['mounts'])

  # Start the container.
  call(['lxc-start'] + c['lxcopts_start'].split(' '))

  # Sleep a little and umount all mounts.
  sleep(2)
  umount(batch=c['mounts'])

#
# COMMAND: Stop a container.
#
def STOP(arguments, container_name):
  c = get_container_vars(container_name)
  if not os.path.exists(c['container_rootfs']):
    quit('container does not exist!')

  # First gently stop the container, then umount the filesystems.
  call(['lxc-stop'] + c['lxcopts_stop'].split(' '))
  umount(batch=c['mounts'])

#
# COMMAND: Destroy a container.
#
def DESTROY(arguments, container_name):
  c = get_container_vars(container_name)
  if not os.path.exists(c['container_rootfs']):
    quit('container does not exist!')

  # Umount everything and then destroy the container.
  umount(batch=c['mounts'])
  call(['lxc-destroy'] + c['lxcopts_destroy'].split(' '))

#
# COMMAND: Update the /etc/hosts file.
#
def UPDHOSTS(arguments, container_name):
  v = get_vars()

  # Generate the list of domain names for each directory under www/.
  DOMAINS = []
  for d in os.listdir("%s/www" % v['repo']):
    if d != '.git':
      if d != 'default':
        if os.path.isdir("%s/%s" % ("%s/www" % v['repo'], d)):
          DOMAINS.append("%s.loc" % d)
  DOMAINS = sorted(DOMAINS)

  # Generate the lines we'd like to inject.
  MARKER_START = "# update-etc-hosts - DO NOT TOUCH THIS SECTION! #############\n"
  MARKER_END   = "# /update-etc-hosts #########################################\n"
  LINES = [MARKER_START]
  linebuf = [v['container_ipv4']]
  for domain in DOMAINS:
    linebuf.append(domain)
    if len(linebuf) == 4:
      LINES.append(" ".join(linebuf) + "\n")
      linebuf = [v['container_ipv4']]
  if len(linebuf) > 1:
    LINES.append(" ".join(linebuf) + "\n")
  LINES.append(MARKER_END)

  # Read /etc/hosts and replace OR add the new lines, generate a full new buffer.
  buffer = []
  with open('/etc/hosts', 'r') as hro:
    had_old_section = False
    within_old_section = False
    for line in hro.readlines():
      if line == MARKER_START:
        within_old_section = had_old_section = True
      if within_old_section:
        if line == MARKER_END:
          within_old_section = False

          # Now append the newly generated section just in place.
          for line in LINES:
            buffer.append(line)
        continue
      else:
        buffer.append(line)
    if not had_old_section:
      last_line = buffer.pop()
      buffer.append(last_line)
      if last_line != "\n":
        buffer.append("\n")
      for line in LINES:
        buffer.append(line)
  hro.close()

  # Reopen /etc/hosts in truncated write mode, and rewrite the file.
  with open('/etc/hosts', 'w') as hw:
    for line in buffer:
      hw.write(line)
  hw.close()

  if had_old_section:
    print("Successfully replaced the old hosts in /etc/hosts!\n")
  else:
    print("Successfully added the hosts to /etc/hosts!\n")
  print("".join(LINES))

#
# Retrieve a list of all containers.
#
def containers(check = False):
  global _containers
  if not '_containers' in globals():
    _containers = {}
    for d in os.listdir(get_var('repo')):
      if d != '.git':
        if os.path.isdir(d) and not os.path.islink(d):
          if d not in _containers:
            if 'config.ini' in os.listdir("%s/%s" % (get_var('repo'), d)):
              _containers[d] = []
        if os.path.islink(d):
          dst = os.path.basename(os.path.realpath(d))
          if dst not in _containers:
            _containers[dst] = []
          _containers[dst].append(d)
  if check:
    for container,aliases in _containers.items():
      if (check in aliases) or (check == container):
        return container
    return False
  return _containers

#
# Initialize a container when it does not yet exist.
#
def initialize(c):

  # When the container doesn't exist yet, we need to create it.
  if not os.path.exists(c['container_rootfs']):
    call(['lxc-create'] + c['lxcopts_create'].split(' '))

    # Configure the static IP address and silence app armor (since Ubuntu 14.10)
    with open("%s/config" % c['container_lxc'], "a") as config:
      config.write("\n# CUSTOM CONFIGURATION FOR %s\n" % c['container_name'])
      config.write("lxc.network.ipv4 = %s/24 %s\n" % (c['container_ipv4'], c['container_ipv4_nm']))
      config.write("lxc.network.ipv4.gateway = %s\n" % c['container_ipv4_gw'])
      config.write("lxc.aa_allow_incomplete = 1")

    # Statically configure the (Debian) container since lxc.network.ipv4 doesn't
    # work reliably anymore since Ubuntu 14.10, this does ;).
    if os.path.exists("%s/etc/network/interfaces" % c['container_rootfs']):
      with open("%s/etc/network/interfaces" % c['container_rootfs'], "w") as interfaces:
        interfaces.write("auto lo\n")
        interfaces.write("iface lo inet loopback\n\n")
        interfaces.write("auto eth0\n")
        interfaces.write("iface eth0 inet static\n")
        interfaces.write("        address %s\n" % c['container_ipv4'])
        interfaces.write("        netmask %s\n" % c['container_ipv4_nm'])
        interfaces.write("        gateway %s\n" % c['container_ipv4_gw'])
        interfaces.write("        dns-nameservers %s\n" % c['container_ipv4_ns'])
    if os.path.exists("%s/etc/resolv.conf" % c['container_rootfs']):
      with open("%s/etc/resolv.conf" % c['container_rootfs'], "w") as resolvconf:
        resolvconf.write("nameserver %s\n" % c['container_ipv4_ns'])

    # Add a explanatory message to /etc/issue.
    if os.path.exists("%s/etc/issue" % c['container_rootfs']):
      with open("%s/etc/issue" % c['container_rootfs'], "a") as etcissue:
        etcissue.write("Welcome to your LXC container %s!\n\n" % c['container_name'])
        etcissue.write("This is not a vm, but a isolated container keeping\n")
        etcissue.write("your development tools isolated. Login with root/root\n")
        etcissue.write("and shut it down with 'halt -p'.\n\n")
        etcissue.write("Visit http://%s/ for further instructions.\n\n" % c['container_ipv4'])

    # Install the provisioner scripts.
    for script in c['scripts']:
      service = os.path.basename(script).replace('.sh', '')
      copyfile(script, '%s/etc/init.d/%s' % (c['container_rootfs'], service))
      call(['chmod', '755', '%s/etc/init.d/%s' % (c['container_rootfs'], service)])
      call(['chroot', c['container_rootfs'], '/usr/sbin/update-rc.d', service, 'defaults'])

    # Create two provisioner helper scripts (sh, php) with all variables.
    with open("%s/etc/lxc-containervars.sh" % c['container_rootfs'], 'w+') as varssh:
      varssh.write("#!/bin/bash\n")
      for k, v in sorted(c.items()):
        if type(v) == str:
          varssh.write("export LXC_%s=\"%s\"\n" % (k.upper(), v))
    with open("%s/etc/lxc-containervars.php" % c['container_rootfs'], 'w+') as varsphp:
      varsphp.write("<?PHP\n")
      for k, v in sorted(c.items()):
        if type(v) == str:
          varsphp.write("$lxc_%s = \"%s\";\n" % (k, v))

    # Start the instance for the first time, the provisioner will run and shut
    # itself down at the very end of the process. A proper mount follows.
    call(['lxc-start'] + c['lxcopts_start'].split(' '))

#
# Mount the given src,dst bind mount instruction.
#
def mount(batch=[], op='mount', m=None):
  if len(batch):
    for m in batch:
      mount(op=op, m=m)
    return

  if (op == 'ismounted'):
    if m['dst'] in str(check_output(['mount'])):
      return True
    return False

  elif (op == 'mount'):
    if not mount(op='ismounted', m=m):
      if not os.path.exists(m['dst']):
        call(['mkdir', '-p', m['dst']])
      call(['mount', '--bind', m['src'], m['dst']])
      if m['mode'] == 'ro':
        sleep(1)
        call(['mount', '-oremount,ro', m['dst']])
      sleep(1)
    if not mount(op='ismounted', m=m):
      quit("u-oh... bind mounting %s failed!" % m['dst'])
    return True

  elif (op == 'umount'):
    if mount(op='ismounted', m=m):
      call(['umount', '--force', m['dst']])
      sleep(2)

    # Check if the destination umounted properly. If we wouldn't, this could
    # lead to a situation where lxc-destroy traverses into read-write mounted
    # paths and destroying kittens. Although its always recommended to put {ro}
    # in declared mounts in config.ini, this unfortunately doesn't always work.
    if mount(op='ismounted', m=m):
      msg = "%s DID NOT UMOUNT PROPERLY!\n\n" % m['dst']
      msg = msg + "Please review which processes still use the mount by\n"
      msg = msg + "running: lsof|grep %s\n\n" % m['dst']
      msg = msg + "Then kill the identified processes and run this again!\n"
      quit(msg)

#
# Umount the given src,dst bind mount instruction.
#
def umount(batch=[], op='umount', m=None):
  mount(batch=batch, op=op, m=m)

#
# Satisfy that all dependencies are met and won't cause issues.
#
def test_environment_dependencies(prog=None):

  # Check for the given binaries existence.
  if prog is not None:
    for dir in os.environ['PATH'].split(os.pathsep):
      if os.path.exists(os.path.join(dir, prog)):
        return True
    return False

  # Perform all runtime tests.
  v = get_vars()
  deps = ['chroot', 'chmod', 'mount', 'umount',
          'lxc-start', 'lxc-stop', 'lxc-destroy']
  if pwd.getpwuid(os.stat(v['repo']).st_uid).pw_dir not in v['repo']:
    quit("containers repository should be put within your home directory!")
  if platform.system() != 'Linux':
    quit('This only works on Linux.')
  if oct(stat.S_IMODE(os.lstat(v['lxc']).st_mode)) != '0o705':
    quit('Please do "sudo chmod 705 %s".' % v['lxc'])
  for dep in deps:
    if not test_environment_dependencies(dep):
      quit("dependency %s not satisfied!" % dep)

#
# Get the container variables.
#
def get_container_vars(container_name):
  c = get_vars()
  c['container_name'] = container_name
  c['container_repo'] = get_vars_parsefile_replace(c, c['container_repo'])
  c = get_vars_parsefile("%s/config.ini" % c['container_repo'], c)

  # Rewrite the mount destinations.
  mounts = []
  for mount in c['mounts']:
    mount['dst'] = "%s/%s" % (c['container_rootfs'], mount['dst'])
    mount['dst'] = mount['dst'].replace('//', '/')
    mounts.append(mount)
  c['mounts'] = mounts

  # Collect every script ending on .sh as script.
  c['scripts'] = []
  for f in os.listdir(c['container_repo']):
    if f[-3:] == '.sh':
      c['scripts'].append("%s/%s" % (c['container_repo'], f))
  return c

#
# Retrieve the argument parser object and the parsed arguments.
#
def get_parser_and_arguments():
  descr = 'A minimalist LXC based container manager'
  if ('-h' in sys.argv) or ('--help' in sys.argv):
    sys.argv = [sys.argv[0], 'fake']
  if ('-u' in sys.argv) or ('--update-hosts' in sys.argv):
    sys.argv = [sys.argv[0], '-u', 'fake', 'start']
  else:
    if (len(sys.argv)) == 1:
      sys.argv.append('fake')
    if (len(sys.argv)) == 2:
      sys.argv.append('start')
  _containers = []
  for c,aliases in containers().items():
    if len(aliases):
      _containers.append("%s (%s)" % (c, ", ".join(aliases)))
    else:
      _containers.append(c)
  descr_c = "\n".join(["  - %s" % c for c in _containers])
  descr = '%s\n\ncontainers:\n%s' % (descr, descr_c)
  parser = argparse.ArgumentParser(
                formatter_class=argparse.RawTextHelpFormatter,
                add_help=False,
                prog='./server',
                description=descr)
  parser.add_argument('--update-hosts', '-u',
                dest='updhosts', action='store_true', default=False,
                help='Update the /etc/hosts file.')
  parser.add_argument('container',
                help='The name of the container')
  parser.add_argument('command',
                choices=['start', 'stop', 'destroy'],
                help='Whether to start (default), stop or destroy the container.')
  arguments = parser.parse_args()
  if arguments.updhosts:
    arguments.command = 'updhosts'
  return (parser, arguments)

#
# Get the master configuration.
#
def get_vars():
  v = {}
  v['mounts'] = []
  v['repo'] = os.path.dirname(os.path.abspath(__file__))
  v['home'] = pwd.getpwuid(os.stat(v['repo']).st_uid).pw_dir
  v['user'] = pwd.getpwuid(os.stat(v['repo']).st_uid).pw_name
  v = get_vars_parsefile("%s/config.ini" % v['repo'], v)
  return v

#
# Parse the given configuration file.
#
def get_vars_parsefile(path, v):
  if not os.path.exists(path):
    quit("cannot find %s!" % (path))
  config = HeaderlessConfigParser()
  config.read(path)
  for ns in config:
    for key, value in config[ns].items():
      if ns == '__':
        v[key] = value
      elif ns == 'mounts':
        mount = {
          'mode': key.replace('{', '').split('}')[0],
          'src': key.replace('{', '').split('}')[1],
          'dst': value
        }
        v['mounts'].append(mount)
      else:
        v["%s_%s" % (ns, key)] = value
  for key, value in v.items():
    if key is not 'mounts':
      v[key] = get_vars_parsefile_replace(v, value)
    else:
      mounts = []
      for mount in value:
        mount['src'] = get_vars_parsefile_replace(v, mount['src'])
        mount['dst'] = get_vars_parsefile_replace(v, mount['dst'])
        mounts.append(mount)
      v['mounts'] = mounts
  return v

#
# Replace variable references used in parsed configuration files.
#
def get_vars_parsefile_replace(v, value):
  for k, _v in v.items():
    if type(_v) != str:
      continue
    value = value.replace('$%s' % k, _v)
  return value

#
# Get a variable from the master configuration.
#
def get_var(variable):
  return get_vars()[variable]

#
# Quit the application in case of failure.
#
def quit(msg):
  sys.exit('ERROR: %s' % msg)

#
# Alternative configparser that allows the top-items to be sectionless.
#
class HeaderlessConfigParser(configparser.ConfigParser):
  def read(self, filename):
    try:
      text = open(filename).read()
    except IOError:
      pass
    else:
      file = io.StringIO("[__]\n" + text)
      self.readfp(file, filename)

#
# Parse and manipulate sys.argv and dispatch code.
#
parser, arguments = get_parser_and_arguments()
if not containers(arguments.container) and not arguments.updhosts:
  parser.print_help()
else:
  # Re-execute ourselves as root from this point on, we'll need to mess
  # around in /var/lib/lxc quite a bit so this makes it much easier.
  if os.geteuid() != 0:
    print("LXC and this script require root-level privileges in order to manage")
    print("your containers and %s, please provide your biggest secret below.\n" % get_var('lxc'))
    os.execvp("sudo", ["sudo"] + sys.argv)

  # Test the computing environment for needed binaries, permissions, etc.
  test_environment_dependencies()

  # Dispatch execution to a function with the CAPITALIZED name of the command.
  locals()[arguments.command.upper()](arguments, containers(arguments.container))
